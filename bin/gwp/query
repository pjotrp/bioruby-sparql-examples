#!/usr/bin/env ruby
#
# Queries for GWP
#
# BioRuby bio-sparql-examples Plugin BioSparqlExamples
# Author:: Pjotr Prins
# Copyright:: 2013

require 'sparql/client'

USAGE =<<DESCRIPTION

Run queries on a GWP database. Queries are

  species        : Find included species and data sources and count clusters
  homologs       : Find all species/source/clusters with homologs
  overlap        : Find overlapping clusters betweens species
  match          : For fams count matching fams

Switches are

  --all          : include all clusters
  --is_pos_sel   : restrict to hclusters with positive selection
  --species      : use within species db
  --nr           : use nr db

DESCRIPTION

gempath = File.dirname(File.dirname(File.dirname(__FILE__)))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

# print banner
print "bio-sparql-examples #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2013\n"

if ARGV.size == 0
  print USAGE
end

require 'bio-sparql-examples'
require 'optparse'
require 'bio-sparql-examples/gwp/db'

include BioSparql

# Uncomment when using the bio-logger 
require 'bio-logger'
log = Bio::Log::LoggerPlus.new 'bio-sparql-examples'
log.outputters = Bio::Log::Outputter.stderr 
Bio::Log::CLI.logger('stderr')
Bio::Log::CLI.trace('debug')

options = {:show_help=>false}

opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\ne.g. #{File.basename($0)}"

  o.on("--is_pos_sel", "Positive selections only") do |b|
    options[:is_pos_sel] = true
  end
  
  o.on("--species", "Species DB") do |b|
    options[:species] = true
  end
  
  o.on("--nr", "NR DB") do |b|
    options[:nr] = true
  end
  
  o.on("-v", "--verbose", "Run verbosely") do |v|
    Bio::Log::CLI.trace('info')
    options[:verbose] = true
  end

  o.on("-d", "--debug", "Debug mode") do |v|
    Bio::Log::CLI.trace('debug')
    options[:debug] = true
  end
  
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end


begin
  opts.parse!(ARGV)

  command = ARGV.shift

  if options[:show_help]
    print USAGE
    exit 1
  end

  raise "Do not mix --species and --nr" if options[:species] and options[:nr]
  case command
    when 'overlap'
      require 'bio-sparql-examples/gwp/'+command
      BioSparql::GWP::Overlap::query()
    when 'species'
      is_pos_sel = if options[:is_pos_sel]
                     "?fam :is_pos_sel true ."
                   else
                     ""
                   end
      sparql = BioSparql::GWP.query(<<QUERY
        SELECT ?species ?source (COUNT(?cluster) as ?c)  WHERE {
              ?fam :species ?species ;
                :source ?source ;
                :clusterid ?cluster .
              #{is_pos_sel} 
        } GROUP BY ?species ?source 
QUERY
        ).each { | rec | Pretty::println rec }
    when 'homolog'
      require 'bio-sparql-examples/gwp/homologs'
      args = options.merge(:filter => "FILTER (?species != ?hspecies)")
      BioSparql::GWP::Homologs::query args
    when 'match'
      require 'bio-sparql-examples/gwp/overlap'
      args = options.merge(:filter => "FILTER (?species != ?hspecies)")
      BioSparql::GWP::Overlap::query args
        # Should be   Mi      CDS     22
end

rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

